@using System
@using System.IO;

<div class="users-info">
    <h1>Add users with addresses from XML</h1>
    <div class="btn_container">
        <div class="input-file">
            <InputFile class="btn btn-primary" OnChange="SetData">Chose file</InputFile>
        </div>

        <div class="info-btn" @onmouseover="ShowInfo" @onmouseout="ShowInfo"></div>
    </div>

    @if (Loaded && !Error)
    {
        <table class="emp-tbl" id="Employees">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Surname</th>
                    <th>Contact Nr</th>
                    <th>Email</th>
                    <th>Street</th>
                    <th>Street Nr</th>
                    <th>House Nr</th>
                    <th>City</th>
                    <th>ZIP Code</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var emp in Employees)
                {
                    <tr id="@emp.ID" @key="@emp">
                        <td>@emp.ID</td>
                        <td><input type="text" class="form-control" @bind="@emp.FirstName" readonly ondblclick="this.readOnly='';"/></td>
                        <td><input type="text" class="form-control" @bind="@emp.LastName" readonly ondblclick="this.readOnly='';"/></td>
                        <td><input type="text" class="form-control" @bind="@emp.ContactNo" readonly ondblclick="this.readOnly='';"/></td>
                        <td><input type="text" class="form-control" @bind="@emp.Email" readonly ondblclick="this.readOnly='';"/></td>
                        <td><input type="text" class="form-control" @bind="@emp.Address.Street" readonly ondblclick="this.readOnly='';"/></td>
                        <td><input type="text" class="form-control" @bind="@emp.Address.StreetNr" readonly ondblclick="this.readOnly='';"/></td>
                        <td><input type="text" class="form-control" @bind="@emp.Address.HouseNr" readonly ondblclick="this.readOnly='';"/></td>
                        <td><input type="text" class="form-control" @bind="@emp.Address.City" readonly ondblclick="this.readOnly='';"/></td>
                        <td><input type="text" class="form-control" @bind="@emp.Address.Zip" readonly ondblclick="this.readOnly='';"/></td>
                        <th><button class="btn-delete" @onclick="@((e) => { Delete(emp); })"></button></th>
                    </tr>
                }
            </tbody>
        </table>

        <div class="btn_container">
            <div class="save-container">
                <button class="btn btn-primary" disabled=@Saving @onclick="Save">Save</button>
            </div>
        </div>
    }
    else if (Loaded && Error)
    {
        <div class="error">
            Error with loaded, a data from file. Please check the file.
        </div>
    }

</div>




@if (ShowedInfo)
{
    <ImportInfo />
}

@if (Saved && !Error)
{
    <div class="saved-info">
        @SavedEls elements was saved
    </div>
}
else if (!Saved && DBError)
{
    <div class="error">
        Error with save data in db.
    </div>
}

@code {
    public bool Loaded { get; set; } = false;
    public bool Error { get; set; } = false;
    public List<Objects.Employee> Employees { get; set; }

    private async void SetData(InputFileChangeEventArgs e)
    {
        string xml = "";
        Loaded = false;
        Saved = false;

        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                using (var stream = file.OpenReadStream())
                using (var reader = new StreamReader(stream))
                {
                    xml = await reader.ReadToEndAsync();
                }
                Error = false;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Error = true;
            }
        }

        if (!Error)
        {
            Employees = Controllers.EmployeesController.GetFromXML(xml);
            if (Employees.Count != 0)
            {
                Error = false;
                Loaded = true;
            }
            else
            {
                Error = true;
                Loaded = true;
            }
        }
        else
        {
            Loaded = true;
        }

        Saving = false;
        this.StateHasChanged();
    }

    public bool ShowedInfo { get; set; }

    public void ShowInfo()
    {
        ShowedInfo = !ShowedInfo;
    }


    public bool Saved { get; set; }
    public bool DBError { get; set; }
    public int SavedEls { get; set; }
    bool Saving = false;

    void Save()
    {
        Saving = true;

        SavedEls = Controllers.EmployeesController.Save();

        if (SavedEls > 0)
        {
            Saved = true;
        }
        else
        {
            Saved = false;
            DBError = true;
        }
    }

    void Delete(Objects.Employee employee)
    {
        Employees.Remove(employee);
        this.StateHasChanged();
    }
}
